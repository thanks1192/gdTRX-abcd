<?php
namespace support;

use Throwable; 
// use Exception;
use Webman\Http\Request;
use Webman\Http\Response;
// use App\api\Exception\ApiException;
use Respect\Validation\Exceptions\ValidationException;

class Exception extends \Webman\Exception\ExceptionHandler
{
    public function render(Request $request, Throwable $exception): Response
    {
        // 验证器异常处理
        if ($exception instanceof ValidationException) { 
            return json(['code'=>500, 'msg'=>$exception->getMessage()]);
        }

        // 自定义异常处理
        // if ($exception instanceof ApiException){ 
        //     return json(['code'=>500, 'msg'=>$exception->getMessage()]);
        // }
        
        // 所有异常处理
        if ($exception instanceof Exception){ 
            return json(['code'=>501, 'msg'=>$exception->getMessage()]);
        }

        // 记录错误日志
        if ($exception instanceof Throwable) { 
            $code = $exception->getCode(); 
            $error = \nl2br((string)$exception);  
            preg_match('/(.*)\sin.*(app|vendor)(.*):([0-9]+)/i', $error, $return); 
            if(count($return) == 5){
                $explode = explode(".",$return[3]);
                $error = "Server error报警\n路径：{$return[2]}{$explode[0]}\n行号：{$return[4]}\n错误：{$return[1]}";
                echo "\n\033[0;31m{$error}\033[0m\n";  
            } 
            return json(['code'=>$code ? $code : 500, 'msg'=>$exception->getMessage() ?? 'Server error 未知原因请查日志']);
        }

        return parent::render($request, $exception); // TODO: Change the autogenerated stub
    }
}